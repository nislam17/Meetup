createevent.php
insert into events (title, description, start_time, end_time, group_id, lname, zip ) values (?,?,?,?,?,?,?)
creates the event, where each ? corresponds to an attribute of an event
NOTE: Application code guarantees only authorized users can create a group

creategroup.php
insert into groups (group_name, description, username) values (?,?,?)
creates the group, where each ? corresponds to an attribute of an event

select group_id from groups 
where username = ? and (group_id,username) not in 
	(select group_id,username from belongs_to)
gets the group_id of the created group to use for the next query

insert into belongs_to (group_id, username, authorized) values (?,?,1)
adds the creator to the group, with authorized set to 1

event_page.php
insert into attend (event_id, username, rsvp) values (?,?,1)
allows a user to RSVP for the current event
NOTE: Application code guarantees the user cannot rsvp for an event he is already attending

select rsvp 
from attend join events using (event_id) 
where event_id = ? and username = ?
checks to see if the user already RSVP'd

select event_id,title,start_time,end_time
from (events e natural join attend)
where username = ? and (event_id,username) not in (
	select event_id,username
	from events natural join attend
	where ? > end_time or ? < start_time or event_id = ?
A member will be able to select an event and see if the time conflicts with an event that they plan on going to.
?: current user's username, selected event's start_time, selected event's end_time, and the selected event's event_id

events.php
select event_id,title,e.description,start_time,end_time,group_id,group_name 
from (events e join groups using (group_id)) join attend a using (event_id) 
where a.username = ? and ((start_time > UTC_TIMESTAMP() - interval '5' hour) or (end_time > UTC_TIMESTAMP() - interval '5' hour))
order by start_time
Allows the user to see all of his/her events that have not ended yet

select event_id,title,e.description,start_time,end_time,group_id,group_name 
from (events e join groups using (group_id)) join attend a using (event_id) 
where zip = (select zipcode from member where username = ?) and event_id not in (select event_id from attend where username = ?)
Allows the user to see the events that are in the same area as him/her (zipcode) that he/she isn't attending

group_page.php
delete from attend where event_id=?
delete from events where event_id=?
deletes an event (this is from a redirect from event_page.php)

select interest_name from groups natural join about where group_id = ?
displays the group's interests

insert into belongs_to (group_id, username, authorized) values (?,?,0)
Allows the user to join the group (unauthorized)

update belongs_to set authorized=1 where username=?
Allows authorized users to authorize other members
NOTE: Application code guarantees only authorized users can authorize others

insert into about (interest_name,group_id) values (?,?)
select * from interest where (interest_name) not in (select interest_name from about where group_id = ?)
Allows authorized users to add interests that aren't already in the group
NOTE: Application code guarantees only authorized users can add interests

select event_id,title,description,start_time,end_time,rsvp,username
from events e natural left outer join attend
where group_id = ? and 
	(username = ? or (not exists 
						(select rsvp 
						from attend 
						where username = ? and event_id = e.event_id) && 
					((event_id,username) in 
						(select event_id,max(username)
						from attend
						where username != ?
						group by event_id) or 
					username is null))) 
	order by start_time
combines several tables to remove duplicates and display all of the events in the group, along whether or not the user RSVP's to each one

select username,authorized 
from belongs_to
where group_id = ? 
order by authorized desc								
Displays all members of the group

select distinct group_id,group_name 
from groups natural join about
where ((interest_name) in 
	(select interest_name 
	from groups natural join about 
	where group_id = ?))
		and ((group_id) not in
			(select group_id 
			from belongs_to 
			where username = ? or group_id = ?))
order by group_name
Displays groups that share interests with the current group, and that the user isn't already in

groups.php
select group_id,group_name,authorized 
from groups join belongs_to b using (group_id) 
where b.username = ? 
order by authorized desc,group_name
Displays all od the groups that the user is in


	
	
	
	
	
	
	
	